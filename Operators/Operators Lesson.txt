# OPERATORS: LESSON
-------------------

* Overview
----------
In this lesson you will learn about:

	1. performing basic mathematical operations on variables and values using common symbols.

	2. assigning values to variables and/or performing basic mathematical operations using shorthand operations.

	3. comparing two values and/or variables against each other to return a true/false.

	4. using logical operators (and, or, and not).

In the previous lesson, you learned how to create and set variables, but not what you can do with them beyond that. In this lesson, you will learn about modifying variables with the power 
of math, some shorthand assignment methods, and how to compare variables and values. Finally, we will go over how to use logical operators for “and,” “or,” and “not.”

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Mathematical Operations
-------------------------
At their core, computers are basically fancy calculators. So it’s a good thing to learn how to perform basic mathematical operations early on in your language development.

Addition and subtraction work just as you would expect them to. a = 2 + 3 will store 5 in the variable a. You can also use these variables as part of the math (or all of it).

int a = 2;
int b = 3;
int c = a + b;

These same foundational principles of mathematics hold true for subtraction, multiplication, and division.

* Instructions
--------------
Checkpoint 1 Passed
1.
Now we can add a little flavor to our variable knowledge. The program on the right already has the declaration of the variables and some values set, as well as the output to display the 
final results.

Your task is to modify the values stored in the variables using basic mathematical symbols given any changes.

It was a good week, you sold 200 more books! Update the booksSold accordingly.

Checkpoint 2 Passed
2.
Now that you have the updated book sale counts, calculate the totalSalesValue.


Hint
totalSalesValue is the number of books sold (booksSold) times the cost of each book (bookCost).

Checkpoint 3 Passed
3.
Your publisher takes half of the total sales as part of their cut. Update your totalSalesValue accordingly (you can do this with multiplication or division in the real world, but for 
practice, please use division).

Program.c
---------
#include <stdio.h>

int main() {
  
  // Variables set for you, do not change here
  int booksSold = 100;
  double bookCost = 9.99;
  double totalSalesValue;

  // Make your changes here
  booksSold = booksSold + 200;
  totalSalesValue = booksSold * bookCost;
  totalSalesValue = totalSalesValue/2;
  // Output logic, no need to change this
  printf("You sold %d books and your take home was $%.2f\n", booksSold, totalSalesValue);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Modulo
--------
You may have run across modulo, symbolized as the percent symbol %, before. If not, or as a reminder, modulo performs division but instead of giving you the number of times the 
denominator goes into the numerator, it gives you the remainder after the division. As an example, if you took 10 / 3 you would get 3 with 1 left over. If you wanted to just get the 
remainder and didn’t care about the other part you would do 10 % 3. This would give you 1.

A common use of modulo is determining if an integer is even or odd. If we have an integer, x, and aren’t sure if it’s even or odd, we can use modulo to see the remainder. If the result is 
1, x is odd, otherwise it is even.

* Instructions
--------------
Checkpoint 1 Passed
1.
Modulo can also be used to determine the day of the week given a start and end day. For our exercise, we are going to assume that we are starting on the first (represented by 0) day of 
the week and we want to figure out if n (program starts at 13) days go by, what day of the week is it now.

For the first step, set the initial values for daysThatPass (any positive integer you like) and daysInWeek (7) during their declaration.

Checkpoint 2 Passed
2.
Your task is to use modulo logic to determine the day of the week it will be after n days pass.

Store the result in endingDayOfWeek. If you need help figuring out what you would need to do to calculate this take a look at the hint.


Hint
The day of the week would be:

(starting day + days that pass) % days in a week
since we are starting at day 0 it can be ignored, so simplified to:

days that pass % days in a week
Store this value in your ending day of the week variable.

Program.c
---------
#include <stdio.h>

int main() {
  
  int endingDayOfWeek = 0;
  int daysThatPass = 13;
  int daysInWeek = 7;

  endingDayOfWeek = daysThatPass % daysInWeek;

  printf("You started on the 1st (0) day of the week, went %d days from this, so it is now the %d day of the week\n", daysThatPass, endingDayOfWeek);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Increment and Decrement
-------------------------
C has several shorthand tricks you can use to make your life easier. For instance, it is very common inside a loop to have a counter you want to increment (add 1) or decrement 
(subtract 1) on each pass. C lets you do this by using a double symbol such as:

int a = 1;
a++;

This would now set the value in a to be 2. The shorthand for decrementing is -- instead of ++. So if we wanted to decrement a, it would be:

a--;

* Instructions
--------------
Checkpoint 1 Passed
1.
Decrement m using shorthand.

Checkpoint 2 Passed
2.
Now do the opposite (increment using the shorthand) to n.

Program.c
---------
#include <stdio.h>

int main() {
  int n = 13;
  int m = 10;
  
  m--;
  n++;
  printf("m = %d\n", m);
  printf("n = %d\n", n);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Assignment
------------
It’s one thing to do all these operations, but if the results are thrown away as soon as the statement finishes executing, the entire process has limited usability. What we need is a way 
to assign values to variables. We have already seen the basic way to do this using =, but C offers some additional shorthand tricks for assignment.

Each of the basic math symbols you have learned in this lesson can be done in C with a shortcut. Let’s look at an example of two ways to write simple additions that would give you the 
same end result:

int a = 2;
int b = 3;
a = a + b;

This could also be written as:

int a = 2;
int b = 3;
a += b;

Notice that C lets us shorthand adding something to a variable’s starting value by using +=. You can do this same shorthand with -=, *=, /=, and %= for subtraction, multiplication, 
division, and modulo, respectively.

* Instructions
--------------
Checkpoint 1 Passed
1.
In the example, we showed how to set a variable to itself plus another variable. In the code block on the right, find the total losses by multiplying losses by timesServerCrashed using 
the shorthand method.

Checkpoint 2 Passed
2.
You find out that the losses calculated per crash were far too high, in fact, they were estimated at twice what they actually are! Update your losses to be half what you just calculated 
in the previous step (still using the short hand assignment method).


Hint
Use the short hand for assignment and division in one step /=.

Program.c
---------
#include <stdio.h>

int main() {
  
  int timesServerCrashed = 5;
  double losses = 500.95;
  losses *= timesServerCrashed;
  losses /= 2;
  printf("Total Losses: $%.2f\n", losses);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Comparisons
-------------
You haven’t learned about statements that check on and respond to true/false (known as boolean) values yet, but since we are talking about arithmetic symbols we wanted to give you a 
primer with the symbols used for these checks.

You can check if two values are equal == (notice there are double =s to check for equivalency rather than the single symbol used for assignment), not equal !=, greater than >, greater 
than or equal >=, less than <, and less than or equal <=.

As an example, if you wanted to perform a segment of code if a had the same value as b, you could write it as:

int a = 3;
int b = 3;
if (a == b) {
  a++;
}

Notice in this code that at the end, a would be 4.

* Instructions
--------------
Checkpoint 1 Passed
1.
The code block is ready for your new knowledge to fix this bad code. Insert the missing symbol(s) in the if statement so that the logic inside the check runs and the output is printed.

Note: You will learn more about if statements in a future lesson, for now you want the statement inside of it to be a true statement. So you want to use logical symbol(s) such that the 
comparison between x and y is a true statement.


Hint
With the starting values it is true that x is less than y and it is also true that x is less than or equal to y, either of these comparisons will work in this situation.

Program.c
---------
#include <stdio.h>

int main() {
  
  int x = 5;
  int y = 42;

  if (x !=  y) {
   printf("Congratulations on setting up a comparison correctly!");
  }

}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Logical Operators
-------------------
You do not just have to check one part at a time when you are doing your comparisons. C lets you see if two or more parts are true, if at least one is true, or if something is not true. 
We have already seen a quick example with !=, checking to see if the left side is not equal to the right side, but ! in front of any boolean will see if the statement is not true. 
You will learn more about this when you learn about boolean statements in general.

If you are checking to see if two or more parts are true you can use && between them. If you want to see if any of the parts is true you can use ||. To see both in action here is a 
trivial example:

int a = 2;
int b = 3;
if (a == b && a == 2) {
  printf("both are true\n");
}
if (a == b || a == 2) {
  printf("one or both are true\n");
}
if (!(a == b)) {
  printf("they are not equal\n");
}

In this example, only the second and third statements would evaluate to true. The second statement will be true because a does not equal b but does equal 2 - remember, only one of the parts needs to evaluate to true when using ||. The last statement will be true because the inner equality check will evaluate to false and we then take the opposite of that with !.

* Instructions
--------------
Checkpoint 1 Passed
1.
The code on the right is set to output the correct text when the values are equal, but you can see they are not. Change the if statement to evaluate to true when the variables are not 
equal.

Program.c
---------
#include <stdio.h>

int main() {
  
  int x = 1;
  int y = 27;

  if (x != y) {
    printf("Congratulations on setting up a comparison correctly!");
  } else {
    printf("Please try again!");
  }

}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Order of Operations
---------------------
C does not just process the statements you send it blindly from left to right. It looks at the statements and applies standard rules to the order in which the statements should be 
processed. For instance, it will do multiplication before addition.

There are many more symbols and operations you will learn as you progress with your knowledge of C, but here is a list of the order for the operations we have gone over in this lesson.

Looking at the table below, the operations with priority 1 will be performed first. Then priority 2, 3, and so on will be processed. For operators of the same level of priority, they 
operations occur from left to right.

Priority	Symbol
--------	------
1	++
1	--
1	()
2	!
2	(typecast)
3	*
3	/
3	%
4	+
4	-
5	<, <=
5	>, >=
6	==, !=
7	&&
8	||
9	all assignment operators

* Instructions
--------------
Checkpoint 1 Passed
1.
The code on the right is using the order of operations described above, so for the variable x it will do the multiplication first then the addition. However, we want the addition to occur 
first.

Please fix the line of code to tell the compiler to do the addition first for evaluating into x.


Hint
Put parenthesis around the 2 + 3 to tell the compiler to do this part first when setting the value for x.

Checkpoint 2 Passed
2.
Now take a look at the y equation and notice that it will do the division first, and as an int it will cast it to 0, then add 6. Update the line so it does the addition first and resolves 
to 0 (casting to an int).


Hint
Put parenthesis around the 4 + 6 to tell the compiler to do this part first when setting the value for y.

Program.c
---------
#include <stdio.h>

int main() {
  
  int x;
  int y;

  x = (2 + 3) * 5;
  y = 2 / (4 + 6);

  printf("x is: %d\n", x);
  printf("y is: %d\n", y);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------














































































































































