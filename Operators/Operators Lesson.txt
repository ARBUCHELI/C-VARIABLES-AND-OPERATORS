# OPERATORS: LESSON
-------------------

* Overview
----------
In this lesson you will learn about:

	1. performing basic mathematical operations on variables and values using common symbols.

	2. assigning values to variables and/or performing basic mathematical operations using shorthand operations.

	3. comparing two values and/or variables against each other to return a true/false.

	4. using logical operators (and, or, and not).

In the previous lesson, you learned how to create and set variables, but not what you can do with them beyond that. In this lesson, you will learn about modifying variables with the power 
of math, some shorthand assignment methods, and how to compare variables and values. Finally, we will go over how to use logical operators for “and,” “or,” and “not.”

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Mathematical Operations
-------------------------
At their core, computers are basically fancy calculators. So it’s a good thing to learn how to perform basic mathematical operations early on in your language development.

Addition and subtraction work just as you would expect them to. a = 2 + 3 will store 5 in the variable a. You can also use these variables as part of the math (or all of it).

int a = 2;
int b = 3;
int c = a + b;

These same foundational principles of mathematics hold true for subtraction, multiplication, and division.

* Instructions
--------------
Checkpoint 1 Passed
1.
Now we can add a little flavor to our variable knowledge. The program on the right already has the declaration of the variables and some values set, as well as the output to display the 
final results.

Your task is to modify the values stored in the variables using basic mathematical symbols given any changes.

It was a good week, you sold 200 more books! Update the booksSold accordingly.

Checkpoint 2 Passed
2.
Now that you have the updated book sale counts, calculate the totalSalesValue.


Hint
totalSalesValue is the number of books sold (booksSold) times the cost of each book (bookCost).

Checkpoint 3 Passed
3.
Your publisher takes half of the total sales as part of their cut. Update your totalSalesValue accordingly (you can do this with multiplication or division in the real world, but for 
practice, please use division).

Program.c
---------
#include <stdio.h>

int main() {
  
  // Variables set for you, do not change here
  int booksSold = 100;
  double bookCost = 9.99;
  double totalSalesValue;

  // Make your changes here
  booksSold = booksSold + 200;
  totalSalesValue = booksSold * bookCost;
  totalSalesValue = totalSalesValue/2;
  // Output logic, no need to change this
  printf("You sold %d books and your take home was $%.2f\n", booksSold, totalSalesValue);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Modulo
--------
You may have run across modulo, symbolized as the percent symbol %, before. If not, or as a reminder, modulo performs division but instead of giving you the number of times the 
denominator goes into the numerator, it gives you the remainder after the division. As an example, if you took 10 / 3 you would get 3 with 1 left over. If you wanted to just get the 
remainder and didn’t care about the other part you would do 10 % 3. This would give you 1.

A common use of modulo is determining if an integer is even or odd. If we have an integer, x, and aren’t sure if it’s even or odd, we can use modulo to see the remainder. If the result is 
1, x is odd, otherwise it is even.

* Instructions
--------------
Checkpoint 1 Passed
1.
Modulo can also be used to determine the day of the week given a start and end day. For our exercise, we are going to assume that we are starting on the first (represented by 0) day of 
the week and we want to figure out if n (program starts at 13) days go by, what day of the week is it now.

For the first step, set the initial values for daysThatPass (any positive integer you like) and daysInWeek (7) during their declaration.

Checkpoint 2 Passed
2.
Your task is to use modulo logic to determine the day of the week it will be after n days pass.

Store the result in endingDayOfWeek. If you need help figuring out what you would need to do to calculate this take a look at the hint.


Hint
The day of the week would be:

(starting day + days that pass) % days in a week
since we are starting at day 0 it can be ignored, so simplified to:

days that pass % days in a week
Store this value in your ending day of the week variable.

Program.c
---------
#include <stdio.h>

int main() {
  
  int endingDayOfWeek = 0;
  int daysThatPass = 13;
  int daysInWeek = 7;

  endingDayOfWeek = daysThatPass % daysInWeek;

  printf("You started on the 1st (0) day of the week, went %d days from this, so it is now the %d day of the week\n", daysThatPass, endingDayOfWeek);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------















































