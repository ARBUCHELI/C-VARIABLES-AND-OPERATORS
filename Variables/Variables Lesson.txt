# VARIABLES: LESSON
-------------------

* What is a Variable in C?
--------------------------
In this lesson you will learn about:

	1. The rules for naming variables in C.

	2. The main data types in C: int, float, double, and char.

	3. Declaring and initializing data types in C, as well as changing their value.

	4. Casting from one data type to another, and some potential limitations in C.

Let’s start with what a variable is. It is a reference used to store information for future use. For instance, int score can be called later in your code to assign, change, compare, etc. 
In this example, you can see the basic structure of variable creation (known as declaration) is type variable_name. Have no fear, we will go over each part of this and more in this 
lesson. Specifically, we will cover how to create, name, assign, modify, and convert them to different types.

As a bonus tip right from the start, you can create more than one variable of the same type at a time by listing them with commas between their names, like type variable1, variable_2, 
variable_3, variable4.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Naming Standards
------------------
We are going to start with the second part of our variable declaration, type variable_name, the variable_name. C does not allow you to throw anything down and call it a variable name, 
there are some restrictions.

	. Names can be composed of upper and lower case letters, numbers, and underscores.

	. The first character must be a letter (upper or lower case).

	. No keywords are allowed as the full name (int is not allowed but int_count would work).

That’s it, nothing too crazy, just keep those rules in mind when you are creating your names for your variables.

* Instructions
--------------
Checkpoint 1 Passed
1.
The code on the right has errors in each of the variable declarations. Look at the rules for variable names above and fix each of them so that there is one variable declaration per line 
and the code compiles.

When complete you will see "Hello World" in the output window.

Program.c
---------
#include<stdio.h>

int main() {
  
  int number;
  int test_value;
  int example;
  float int1;
  printf("Hello World!\n");

}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Data Types
------------
What about that first part of our template type (from type variable_name)? We saw some examples in the previous exercise when you corrected the bad variable names, but let’s talk about 
what they are.

The type of a variable denotes what kind of information can be stored in it. C has a good number of types you can use, but in this lesson, we will go over some of the most common ones: 
int, float, double, and char.

In C, you must specify the type of the variable when you declare it. Once it is set, that type of information is the only type that can go into that variable. So if you create a variable 
of type int, which can only store whole numbers, you will not be able to store "a" nor 1.2 in it. The table below details these types we are going over and what information can go into 
each.

	Type			Description					Values
	----			-----------					------
	int			a whole number					-2,147,483,648 to 2,147,483,647
	float			a number with possible decimals			6 decimal places
	double			a number with possible decimals			15 decimal places
	char			stores one character (letter or number)		a single character

There are a few questions you might be asking yourself looking at these descriptions. What’s the difference between a float and a double? We are going to look at this in the next 
exercise. char holds a single letter or number, but what if you want to store something like a person’s name, that is more than one character (in most cases)? That gets a bit more 
technical and you will learn about how that works in the lesson on strings later in the course!

* Instructions
--------------
Checkpoint 1 Passed
1.
The code in the editor is ready to display basic information about an imaginary student. The problem is the programmer forgot to declare the data types for each variable at the top of the 
program, so it will fail with errors.

Go in and add appropriate data types to each variable so when you run the application the program completes and student information is displayed.


Hint
For the fees, a double or a float would allow the application to compile, but as a rule of thumb double should be used when money is involved to ensure better accuracy.

Program.c
---------
#include <stdio.h>

int main() {
  
  // Fix the missing data types
  int studentRank;
  float studentFeeTotal;
  char studentGradeLetter;
  
  // No need to make any changes below here, use these as a hint to how each variable above should be declared
 studentRank = 1;
 studentFeeTotal = 100.56;
 studentGradeLetter = 'A';

 printf("Student's Rank in class: %dst\n", studentRank);
 printf("Student's Total Fees: $%3.2f\n", studentFeeTotal);
 printf("Student's Grade: %c\n", studentGradeLetter);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* printf()
----------
We are going to take a little detour for a minute to help you understand what is going on in the code in the lessons. You might have noticed printf() at the bottom of some exercises. This 
allows for text output to the terminal.

The basic format is printf("string to display", [list of optional parameters]).

So if you had something like printf("Hello World!"), the terminal would display Hello World!.

The optional parameters let you add values dynamically into the string, such as values stored in the variables we have been learning about. For example, if we wanted to output Hello 
World, today is the 3rd!, you could do that like this:

int day = 3;
printf("Hello World, today is the %drd!", day);

When the compiler runs the code it will replace %d with the value in the variable list, taking them in the order found in the string matching the order they are listed; first in the 
string is matched with first in the list of parameters).

There are lots of optional formatting and parameter types that can be used, but for our purposes here are a few of the basic ones.

To indicate a variable type you want to replace:

		symbol		type
		------		----
		%d or %i	int
		%f		double or float
		%c		char

You can also use some reserved symbols within the string to have invoked formatting, here are a few common ones.

		symbol	effect
		------	------
		\n	newline
		\r	carriage return
		\t	tab

* Instructions
--------------
Checkpoint 1 Passed
1.
Add newline command at the end of the first printf() so that the output is cleaner.


Hint
\n will give you a newline inside the string with printf(). We want to put it after the period and before the end of the double quotes in the first printf().

Checkpoint 2 Passed
2.
Modify the printf() command in the code to add the variable to the output so that the output makes sense.


Hint
You can use %d or %i to add an int variable dynamically to the output in a printf() string. From the sentence having the age makes the most sense between 'was' and 'years'. Then after the 
double quotes add a comma to indicate your list of parameters to get the values from and add the variable ageLearnedToRide.

Program.c
---------
#include <stdio.h>

int main() {
  
 int ageLearnedToRide = 5;


 printf("I was %d years old when I learned to ride a bike.\n", ageLearnedToRide);
 printf("I hope I still remember how to ride.");
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Initialization
----------------
Let’s get back to understanding variables in C. Now that we have our variable, we know its name and what it can hold, what do we do with it? Right now it’s empty and doesn’t serve any 
real purpose. A variable’s power comes from its ability to be set, changed, and examined. So the question is, how do we do that?

There are two ways to set a value, for now let’s look at how to set the value when you create the variable itself:

int example = 3;

In this case, not only have you created the variable, named it example, and identified it to hold whole numbers, you have set its value to be 3. We’ve saved time by doing all these parts 
in one line!

When declaring a char, you need single quotes around it:

char foo = 'a';
char goo = '2';

* Instructions
--------------
Checkpoint 1 Passed
1.
The code has several variables (names and types already set up correctly). First, set an appropriate value for numOfBooks variable.

Notice that the code does compile without the other variables set to specific values, but you get some strange results. This is a good lesson to keep in mind; the compiler will run your 
code if you don’t set a value (in most cases) but you won’t be able to depend on the value in the variable. It’s good practice to set a default value for variables you create as soon as 
is practical in your code.

Checkpoint 2 Passed
2.
What is your favorite letter? Put it in for the value for favLetter. Remember, since it’s a char, you’ll need to put single quotes around the value when you declare it.

Checkpoint 3 Passed
3.
Do you have a favorite digit? Put that into favDigit. Remember, since it’s a char, you’ll need to put single quotes around the value when you declare it. As a char it can only take one 
digit, so for example '7' would be valid but '70' would not be.

Checkpoint 4 Passed
4.
Last, what does a candy bar cost at your local store? Set this into the costOfCandyBar variable.

Program.c
---------
#include <stdio.h>

int main() {
  
  int numOfBooks = 10;
  char favLetter = 'B';
  char favDigit = '8';
  double costOfCandyBar = 0.50;

  printf("Number of books: %d\n", numOfBooks);
  printf("Your Favorite Letter is: %c\n", favLetter);
  printf("Your Favorite Digit is: %c\n", favDigit);
  printf("You expect to pay $%.2f for a candy bar.\n", costOfCandyBar);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Float and Double, What's the Difference?
------------------------------------------
So why are there two different types for decimals in C? The short answer is different types for different situations.

A float has less precision than a double, 6 vs 15 possible decimal places respectively, and therefore takes up less memory (4 vs 8 bytes). However, a double run faster, so you gain speed 
at the cost of more memory usage.

The other thing to be aware of is that the system is rounding the values you store in either. This can cause unexpected results, especially with a float as they have less precision. This 
is why you will see double being used any time accuracy is important, such as in scientific, medical or financial applications.

* Instructions
--------------
Checkpoint 1 Passed
1.
In this example much of the code is already in place, don’t worry at this point if you can’t follow everything that is going on yet, you will learn about loops in a later lesson. For now, 
you will want to experiment with numOfLoops and keep increasing its value until something unusual happens with the output, specifically the float value.

In general, the program takes a double and a float and adds 0.1 to each over and over again numOfLoops times. So if you set it to 10, that means it’s adding 0.1 ten times, or 0.1 x 10 so 
the output would be 1.0. float and double both give you this value, but keep making numOfLoops higher and a float will start to give unexpected results, showing their lower precision and 
rounding issues.


Hint
Our testing showed that once you get to numOfLoops = 28 you will notice that float variables start to have rounding errors. That means that in this case simply adding 0.1 28 times causes 
a rounding error.

Program.c
---------
#include <stdio.h>

int main() {
  
// Modify this variable value, start low and increase until something odd appears in the results
  int numOfLoops = 100000;

  // Please do not modify anything below this point
  float a = 0.1f;
  float b = 0;
  double x = 0.1;
  double y = 0;

  printf("At the start, our target float b is:%f\n", b);
  printf("At the start, our target double y is:%f\n", y);

// If you were curious about what this code is doing, it is looping through and adding to our variables b and y a set amount of 0.1 on each loop
  for(int i = 0; i < numOfLoops; i++)
  {
    b += a;
    y += x;
  }

  printf("At the end, our target float b is:%f\n", b);
  printf("At the end, our target double y is:%f\n", y);

}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Updating Values
-----------------
Before, we said that there are two times when you can set a variable’s value. We just examined how to set it at declaration, but if that’s the only place it could be set, variables would 
have limited value (we will see in a moment an exception to this rule). It turns out they can also be set at any future point in the code! As an example:

int total_units;
…
…
…
total_units = 3;

Notice that once we have declared the type we no longer reference the type, we just use the name of the variable. You can also set a variable to be the same as what is stored in another 
variable, such as a = b. If you change b after this, the values will no longer match (there is a way to tie the two variables together so they always match, but we will get to that in a 
later lesson).

Have no fear, we will go over how to do more advanced things with setting the values stored in a variable shortly.

* Instructions
--------------
Checkpoint 1 Passed
1.
In the program on the right, someone has created the initial code by declaring and setting up information on a book turned movie. The output has also been taken care of. What you need to 
do is update the values based on changing information from the market.

The initial movie reviews were generous, but have gone down since opening weekend, the average score for the movie is now a C, please update this score.

Checkpoint 2 Passed
2.
Due to dropping movie ticket sales, the movie theaters decide to match the price of the book to make up for their lost revenue. Set the price of the movie ticket equal to the price of the 
book.

* Program.c
-----------
#include <stdio.h>

int main() {
  
  // These variables were created and had a starting value for you, no need to change
  char bookVersionReview = 'A';
  char movieVersionReview = 'B';
  double ticketPrice = 10.25;
  double bookPrice = 19.99;

  // Update the movie review score here
  movieVersionReview = 'C';
  // Update the ticket price here
  ticketPrice = bookPrice;

  // No need to change below here
  printf("The book version has a review score of %c and costs $%.2f\n", bookVersionReview, bookPrice);
  printf("The movie version has a review score of %c and costs $%.2f\n", movieVersionReview, ticketPrice);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Constants
-----------
In most cases, variable values can be changed in the program, however, there are cases where you do not want to allow for your variables to change value. This is where constants come into 
play. These special types prevent any changes during execution once the value is set at declaration.

Any basic data type in C, like those we have gone over, can be declared as a constant using the keyword const before the type. So instead of our template of type variable_name, it would 
be const type variable_name.

It is also a best practice to use all upper case letters when declaring a constant:

const int DAYSINWEEK = 7;

* Instructions
--------------
Checkpoint 1 Passed
1.
The speed of light is a constant, so a great candidate for an example of the const variable type. For the first step, identify the SPEEDOFLIGHT as a constant.

Notice that the name is already fully capitalized to match constant best practices.

Checkpoint 2 Passed
2.
The program now violates the rules of constants. We know the speed of light won’t change, so how can you fix the code to run correctly by obeying the rules of constants?

Program.c
---------
#include <stdio.h>

int main() {
  
// Speed of light is 1.86e5 mi/s or 186000 mi/s we will store 1.86 and do the multiplicaiton later.
  const double SPEEDOFLIGHT = 1.86;
  int timeTraveledInSeconds = 30;

  //SPEEDOFLIGHT = 1.86;


  // No need to change below here
  printf("Light would travel %.2f miles in %d seconds\n", SPEEDOFLIGHT * 100000 * timeTraveledInSeconds, timeTraveledInSeconds);

}


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Casting Types
---------------
Sometimes it’s useful, or even necessary, to change the value type of a variable and use it for other purposes. For instance, if you had a double with a percent score on a test, say 0.95, 
you would most likely want to display 95% to the user instead. Notice, we are not changing the type of the variable, nor the value stored in the source variable. What we are doing is 
displaying the changed variable as a new type or storing it in a different variable that might be a different type.

So you could do this:

int a;
double b = 3.0;
a = b;

There are two types of conversions, implicit and explicit. When you set one variable to be the same as another, such as a = b above, but their types do not match, the compiler will try to 
convert them. However, this can be dangerous as you might not know what values will be in the variable at runtime, and it might not be implicitly convertible to another type. Our example 
above was implicit, the compiler in this case will make a best guess.

The other way to convert a variable from another type is explicitly. You can do this by simply telling the compiler what type you want to set it to. So in our example above we could 
change the line a = b to a = (int)b. That way if b was something other than 3.0, such as 3.2, we are telling the compiler to make it work, so it would set it to 3.

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s take our example above where we want to take the percent score as a double and convert it to an int for display. Set the displayScore to be testScore.

Checkpoint 2 Passed
2.
Now try doing the conversion explicitly by adding on the (int) to your setting of displayScore = testScore;

Program.c
---------
#include <stdio.h>

int main() {
  
  double testScore = 95.7;
  int displayScore = 0;

  displayScore = testScore;

  displayScore = (int) testScore;
  // No need to change below here
  printf("Great work, you got a %d%% on your test\n", displayScore);

}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Casting Types Continued
-------------------------
A more interesting casting option is converting a char to a number type, or the other way around. Just like before, you have to be careful how you set this up. In the back-end, a char 
doesn’t store 'a', it stores the value representing that: 97 for lowercase and 65 for uppercase.

int targetInt;
char sourceChar = 'a';
targetInt = (int)sourceChar;

Now targetInt equals 97.

When you cast an int to a char, you get the opposite process and the char is set to the value at the int value. So if you did:

int sourceInt = 65;
char targetChar;
targetChar = (char)sourceInt;

targetChar now equals 'A'.

* Instructions
--------------
Checkpoint 1 Passed
1.
If 'a' is 97, what do you suppose we would get if we set an int to 99 and cast it to a char? Let’s find out. The initial state is set so you need to cast our sourceInt to targetChar.

Set targetChar equal to sourceInt and explicitly cast it by using (char).


Hint
<target> = (char)<source>

where

Checkpoint 2 Passed
2.
Now let’s see what happens when you cast a double into a char. Set targetChar to sourceDouble using implicit casting (no type identifier for the cast).

Program.c
---------
#include <stdio.h>

int main() {
  
  char targetChar;
  int sourceInt = 99;
  double sourceDouble = 55.67;

  // Cast here
  targetChar = (char)sourceInt;
  targetChar = sourceDouble;

  // No need to change below here
  printf("source int %d, source double, %.2f, target %c\n", sourceInt, sourceDouble, targetChar);

}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Review
--------
In this Lesson on variables in C we learned:

	1. The rules for naming variables in C.

	2. The main data types in C: int, float, double, and char.

	3. Declaration and initialization of data types in C, as well as how to change their value.

	4. How to cast from one data type to another and some potential limitations in C.

We went over a general introduction to variables, but there is much more to learn. You should now have the building blocks we will add on to. In the next lesson, we will go over more 
options you have with variables, such as arithmetic, comparisons, and logical operators that will allow you to expand on the power of variables in C. Thank you for joining us and we 
can’t wait to dive into the next lesson with you.

* Instructions
--------------
Feel free to practice everything you have learned in this lesson to make sure you have the fundamentals down before moving on.

Program.c
---------
#include <stdio.h>

int main() {
  
  int variableInt;
  char variableChar;
  double variableDouble;

  // Feel free to play around with what you have learned about variables here. You can also create new ones if you like, but right now only the ones created for you are set to be displayed.




  // Output logic
  printf("display an int here: %d\n", variableInt);
  printf("display a char here: %c\n", variableChar);
  printf("display a double with 2 decimal places here: %.2f\n", variableDouble);

}























































































































































































































































